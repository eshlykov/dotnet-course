using System;
using System.Linq;

namespace DrunkFibonacci
{
    internal class Program
    {
        private static void Main()
        {
            Console.WriteLine("Hello World!");

            Console.WriteLine("GetDrunkFibonacci: " + string.Join(',', DrunkFibonacci.GetDrunkFibonacci().Take(100)));
            Console.WriteLine("GetMaxOnRange: " + DrunkFibonacci.GetMaxOnRange(1000, 400));
            Console.WriteLine("GetNextNegativeRange: " + string.Join(',', DrunkFibonacci.GetNextNegativeRange().Take(100)));
            Console.WriteLine("GetXoredWithLaggedItself: " + string.Join(',', DrunkFibonacci.GetXoredWithLaggedItself().Take(100)));
            Console.WriteLine("GetInChunks: " + string.Join(Environment.NewLine, DrunkFibonacci.GetInChunks().Select(x => $"[{string.Join(',', x)}]").Take(3)));
            Console.WriteLine("FlattenChunkedSequence: " + string.Join(',', DrunkFibonacci.FlattenChunkedSequence().Take(60)));
            Console.WriteLine("GetGroupSizes: " + string.Join(',', DrunkFibonacci.GetGroupSizes()));
            
            // Hello World!

            // GetDrunkFibonacci: 1,1,0,1,1,0,1,2,3,5,0,5,8,13,21,0,268,536,772,1300,2064,2356,2656,5012,7636,12648,12948,13248,26196,39444,65640,65892,66144,132036,198180,330184,330452,330752,661204,991956,1653160,1653460,1653760,3307220,4960980,8268160,8268420,8268672,16537092,24805764,41342848,41343108,41343376,82686484,124029860,206716312,206716612,206716880,413433492,620150340,1033583832,1033584068,1033584336,2067168404,-1194214556,872953808,872954068,872954352,1745908420,-1676104524,69803896,69804116,69804368,139608484,209412852,349021328,349021588,349021888,698043476,1047065364,1745108832,1745109124,1745109416,-804748796,940360620,135611792,135612052,135612304,271224356,406836660,678061008,678061268,678061520,1356122756,2034184276,-904660272,-904660004,-904659704,-1809319708,1580987876

            // GetMaxOnRange: 2145379024

            // GetNextNegativeRange: -1194214556

            // GetXoredWithLaggedItself: 1653761,3307221,4960980,8268161,8268421,8268672,16537093,24805766,41342851,41343105,41343376,82686481,124029868,206716309,206716625,206716880,413433752,620149852,1033584604,1033582800,1033582272,2067166624,-1194217212,872948804,872948992,872941720,1745895504,-1676107916,69826860,69843520,69738808,139673792,209346708,349153108,349086640,348696328,698238592,1047396116,1745758644,1745576528,1746761728,-804144944,940965804,136786756,140440640,141258256,273982624,406978100,680932820,688973136,706523728,1386353152,2068441540,-822196028,-847810440,-968769392,-1737112032,1382664756,-356020132,-694857296,-805777928,-648225584,-357503772,-1060778028,52563744,-1879342440,1139757392,131278644,-1009583484,937043448,-1343515392,1403794320,124698444,1386147908,1454887408,1308692608,-1588280704,78364132,-328937876,-73961464,-1376011424,-470071400,972737204,234164252,-437170000,-706162288,-1276223096,-1846674300,1171876884,1305228960,2107213768,-2087869480,699518676,-48777068,-721665216,1741721320,-1852498800,-1017534836,-252265932,988460568
            

            // GetInChunks: [1,1,0,1,1,0,1,2,3,5,0,5,8,13,21,0]
            // [268,536,772,1300,2064,2356,2656,5012,7636,12648,12948,13248,26196,39444,65640,65892]
            // [66144,132036,198180,330184,330452,330752,661204,991956,1653160,1653460,1653760,3307220,4960980,8268160,8268420,8268672]

            // FlattenChunkedSequence: 0,0,0,268,536,772,66144,132036,198180,16537092,24805764,41342848,69803896,69804116,69804368,135611792,135612052,135612304,-228331232,-228331532,-228331832,55025180,275127076,-570584064,31173380,155868036,-912094988,-132753184,-132753452,-132753720,195840028,200346008,585717768,200346308,200346608,400692916,-615534704,-615534972,-615535208,367571792,367572052,367572288,400662084,599372568,599372868,-96114844,435288768,-480573196,57925348,289627852,435289028,24726932,123635668,618179460,-36947692,-575125448,-575125740,-184737436,-323463628,353444276

            // GetGroupSizes: [0, 9775],[1, 5],[2, 1],[3, 1],[4, 214],[5, 4]
        }
    }
}
